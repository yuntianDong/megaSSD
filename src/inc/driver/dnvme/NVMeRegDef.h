#ifndef _NVMEREGDEF_H_
#define _NVMEREGDEF_H_

#include <stddef.h>
#include <limits.h>
#include <vector>

#include <boost/assign/list_of.hpp>
using namespace boost::assign;

#include "NVMeSpecRev.h"

using namespace std;

/////////////////////////////////////////////////////////////////////////////////
//				NVMe PCI Register
/////////////////////////////////////////////////////////////////////////////////

typedef enum enPCICap{
    PCICAP_PMCAP,
    PCICAP_MSICAP,
    PCICAP_MSIXCAP,
    PCICAP_PXCAP,
    PCICAP_AERCAP,
    PCICAP_FENCE
} enPCICap;

typedef enum enRegType{
	REG_RO,
	REG_RW,
	REG_RWC,
	REG_RWS,
	REG_FENCE,
} enRegType;

/*     PciSpc,           cap,            offset,    size, specRev,     maskRO,             impSpec,            dfltValue,          desc */
#define PCISPC_TABLE                                                                                                                                                                   \
    ZZ(PCISPC_ID,        PCICAP_FENCE,   0x00,      4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000ffffffff, 0x00000000ffffffff, 0x0000000000000000, "PCI hdr identifier register (ID)")                 \
    ZZ(PCISPC_CMD,       PCICAP_FENCE,   0x04,      2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x000000000000fab8, 0x0000000000000040, 0x0000000000000000, "PCI hdr cmd register (CMD)")                       \
    ZZ(PCISPC_STS,       PCICAP_FENCE,   0x06,      2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000004eff, 0x00000000000006a0, 0x0000000000000010, "PCI hdr device status register (STS)")             \
    ZZ(PCISPC_RID,       PCICAP_FENCE,   0x08,      1,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000000000ff, 0x00000000000000ff, 0x0000000000000000, "PCI hdr revision ID register (RID)")               \
    ZZ(PCISPC_CC,        PCICAP_FENCE,   0x09,      3,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000ffffff, 0x0000000000000000, 0x0000000000010802, "PCI hdr class codes register (CC)")                \
    ZZ(PCISPC_CLS,       PCICAP_FENCE,   0x0c,      1,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000000000ff, 0x00000000000000ff, 0x0000000000000000, "PCI hdr cache line size register (CLS)")           \
    ZZ(PCISPC_MLT,       PCICAP_FENCE,   0x0d,      1,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000000000ff, 0x0000000000000000, 0x0000000000000000, "PCI hdr master latency timer reg (MLT)")           \
    ZZ(PCISPC_HTYPE,     PCICAP_FENCE,   0x0e,      1,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000000000ff, 0x0000000000000080, 0x0000000000000000, "PCI hdr header type register (HTYPE)")             \
    ZZ(PCISPC_BIST,      PCICAP_FENCE,   0x0f,      1,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000000000bf, 0x0000000000000080, 0x0000000000000000, "PCI hdr built in self test register (BIST)")       \
    ZZ(PCISPC_BAR0,      PCICAP_FENCE,   0x10,      4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000003fff, 0x0000000000000000, 0x0000000000000004, "PCI hdr MLBAR register (BAR0)")                    \
    ZZ(PCISPC_BAR1,      PCICAP_FENCE,   0x14,      4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, "PCI hdr MUBAR register (BAR1)")                    \
    ZZ(PCISPC_BAR2,      PCICAP_FENCE,   0x18,      4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000007, 0x0000000000000000, 0x0000000000000001, "PCI hdr index/data pair register (BAR2)")          \
    ZZ(PCISPC_BAR3,      PCICAP_FENCE,   0x1c,      4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, "PCI hdr reserved area (BAR3)")                     \
    ZZ(PCISPC_BAR4,      PCICAP_FENCE,   0x20,      4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000000, 0x00000000ffffffff, 0x0000000000000000, "PCI hdr vendor specific register (BAR4)")          \
    ZZ(PCISPC_BAR5,      PCICAP_FENCE,   0x24,      4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000000, 0x00000000ffffffff, 0x0000000000000000, "PCI hdr vendor specific register (BAR5)")          \
    ZZ(PCISPC_CCPTR,     PCICAP_FENCE,   0x28,      4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000ffffffff, 0x0000000000000000, 0x0000000000000000, "PCI hdr CardBus CIS register (CCPTR)")             \
    ZZ(PCISPC_SS,        PCICAP_FENCE,   0x2c,      4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000ffffffff, 0x00000000ffffffff, 0x0000000000000000, "PCI hdr subsystem ID register (SS)")               \
    ZZ(PCISPC_EROM,      PCICAP_FENCE,   0x30,      4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000000, 0x00000000ffffffff, 0x0000000000000000, "PCI hdr expansion ROM register (EROM)")            \
    ZZ(PCISPC_CAP,       PCICAP_FENCE,   0x34,      1,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000000000ff, 0x00000000000000ff, 0x0000000000000000, "PCI hdr CAP ptr register (CAP)")                   \
    ZZ(PCISPC_RES0,      PCICAP_FENCE,   0x35,      7,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00ffffffffffffff, 0x0000000000000000, 0x0000000000000000, "PCI hdr reserved area #0")                         \
    ZZ(PCISPC_INTR,      PCICAP_FENCE,   0x3c,      2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x000000000000ff00, 0x000000000000ff00, 0x0000000000000000, "PCI hdr interrupt register (INTR)")                \
    ZZ(PCISPC_MGNT,      PCICAP_FENCE,   0x3e,      1,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000000000ff, 0x0000000000000000, 0x0000000000000000, "PCI hdr min grant register (MGMT)")                \
    ZZ(PCISPC_MLAT,      PCICAP_FENCE,   0x3f,      1,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000000000ff, 0x0000000000000000, 0x0000000000000000, "PCI hdr max latency register (MLAT)")              \
    ZZ(PCISPC_PID,       PCICAP_PMCAP,   USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x000000000000ffff, 0x000000000000fffe, 0x0000000000000001, "PCI power mgmt ID register (PID)")                 \
    ZZ(PCISPC_PC,        PCICAP_PMCAP,   USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x000000000000b7ff, 0x0000000000000027, 0x0000000000000000, "PCI power mgmt CAP register (PC)")                 \
    ZZ(PCISPC_PMCS,      PCICAP_PMCAP,   USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000000060fc, 0x0000000000000000, 0x0000000000000008, "PCI pwr mgmt ctrl & status reg (PMCS)")            \
    ZZ(PCISPC_MID,       PCICAP_MSICAP,  USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x000000000000ffff, 0x000000000000ff00, 0x0000000000000005, "PCI MSI ID register (MID)")                        \
    ZZ(PCISPC_MC,        PCICAP_MSICAP,  USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x000000000000fe8e, 0x000000000000000e, 0x0000000000000080, "PCI MSI msg ctrl register (MC)")                   \
    ZZ(PCISPC_MA,        PCICAP_MSICAP,  USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000003, 0x0000000000000000, 0x0000000000000000, "PCI MSI msg addr  register (MA)")                  \
    ZZ(PCISPC_MUA,       PCICAP_MSICAP,  USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, "PCI MSI msg upper addr register (MUA)")            \
    ZZ(PCISPC_MD,        PCICAP_MSICAP,  USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, "PCI MSI msg data register (MD)")                   \
    ZZ(PCISPC_MMASK,     PCICAP_MSICAP,  USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, "PCI MSI mask bits register (MMASK)")               \
    ZZ(PCISPC_MPEND,     PCICAP_MSICAP,  USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, "PCI MSI pending bits register (MPEND)")            \
    ZZ(PCISPC_MXID,      PCICAP_MSIXCAP, USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x000000000000ffff, 0x000000000000ff00, 0x0000000000000011, "PCI MSI-X ID register (MXID)")                     \
    ZZ(PCISPC_MXC,       PCICAP_MSIXCAP, USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000003fff, 0x00000000000007ff, 0x0000000000000000, "PCI MSI-X msg ctrl register (MXC)")                \
    ZZ(PCISPC_MTAB,      PCICAP_MSIXCAP, USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000ffffffff, 0x00000000ffffffff, 0x0000000000000000, "PCI MSI-X table offset/BIR register (MTAB)")       \
    ZZ(PCISPC_MPBA,      PCICAP_MSIXCAP, USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000ffffffff, 0x00000000ffffffff, 0x0000000000000000, "PCI MSI-X PBA offset/BIR register (MPBA)")         \
    ZZ(PCISPC_PXID,      PCICAP_PXCAP,   USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x000000000000ffff, 0x000000000000ff00, 0x0000000000000010, "PCI express CAP ID register (PXID)")               \
    ZZ(PCISPC_PXCAP,     PCICAP_PXCAP,   USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x000000000000ffff, 0x0000000000003e00, 0x0000000000000002, "PCI express CAP register (PXCAP)")                 \
    ZZ(PCISPC_PXDCAP,    PCICAP_PXCAP,   USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000ffffffff, 0x000000000ffc0fff, 0x0000000010008000, "PCI express device CAP register (PXDCAP)")         \
    ZZ(PCISPC_PXDC,      PCICAP_PXCAP,   USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000000, 0x000000000000fff0, 0x0000000000000000, "PCI express device ctrl register (PXDC)")          \
    ZZ(PCISPC_PXDS,      PCICAP_PXCAP,   USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x000000000000fff0, 0x0000000000000010, 0x0000000000000000, "PCI express device status register (PXDS)")        \
    ZZ(PCISPC_PXLCAP,    PCICAP_PXCAP,   USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000ffffffff, 0x00000000ff47ffff, 0x0000000000000000, "PCI express link CAP register (PXLCAP)")           \
    ZZ(PCISPC_PXLC,      PCICAP_PXCAP,   USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x000000000000fc34, 0x0000000000000200, 0x0000000000000000, "PCI express link ctrl register (PXLC)")            \
    ZZ(PCISPC_PXLS,      PCICAP_PXCAP,   USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x000000000000ffff, 0x00000000000013ff, 0x0000000000000000, "PCI express link status register (PXLS)")          \
    ZZ(PCISPC_RES1,      PCICAP_PXCAP,   USHRT_MAX, 16,   list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0xffffffffffffffff, 0x0000000000000000, 0x0000000000000000, "PCI hdr reserved area #1")                         \
    ZZ(PCISPC_PXDCAP2,   PCICAP_PXCAP,   USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000ffffffff, 0x0000000000fc3b8f, 0x0000000000000010, "PCI express device CAP2 register (PXDCAP2)")       \
    ZZ(PCISPC_PXDC2,     PCICAP_PXCAP,   USHRT_MAX, 2,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000ffff9b0f, 0x000000000000700f, 0x0000000000000000, "PCI express device ctrl2 register (PXDC2)")        \
    ZZ(PCISPC_AERID,     PCICAP_AERCAP,  USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000ffffffff, 0x00000000fff00000, 0x0000000000020001, "PCI AER CAP ID register (AERID)")                  \
    ZZ(PCISPC_AERUCES,   PCICAP_AERCAP,  USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000fc0007ef, 0x00000000003fff0f, 0x0000000000000000, "PCI AER uncorrect err stat register (AERUCES)")    \
    ZZ(PCISPC_AERUCEM,   PCICAP_AERCAP,  USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000fc000fcf, 0x000000000000f1c1, 0x0000000000400000, "PCI AER uncorrect err mask register (AERUCEM)")    \
    ZZ(PCISPC_AERUCESEV, PCICAP_AERCAP,  USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000fc000fcf, 0x0000000003eaa000, 0x0000000000462010, "PCI AER uncorrect err severity reg (AERECESEV)")   \
    ZZ(PCISPC_AERCS,     PCICAP_AERCAP,  USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000ffff0e3e, 0x000000000000c000, 0x0000000000000000, "PCI AER correctable err stat reg (AERCES)")        \
    ZZ(PCISPC_AERCEM,    PCICAP_AERCAP,  USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000ffff0e3e, 0x000000000000c000, 0x0000000000000000, "PCI AER correctable err mask reg (AERCEM)")        \
    ZZ(PCISPC_AERCC,     PCICAP_AERCAP,  USHRT_MAX, 4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000fffff8af, 0x00000000000007e0, 0x0000000000000000, "PCI AER adv err CAP & ctrl register AERCC)")       \
    ZZ(PCISPC_AERHL,     PCICAP_AERCAP,  USHRT_MAX, 16,   list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0xffffffffffffffff, 0x0000000000000000, 0x0000000000000000, "PCI AER header log register (AERHL)")              \
    ZZ(PCISPC_AERTLP,    PCICAP_AERCAP,  USHRT_MAX, 16,   list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0xffffffffffffffff, 0x0000000000000000, 0x0000000000000000, "PCI AER TLP prefix log register (AERTLP)")
	

#define ZZ(a, b, c, d, e, f, g, h, i)      a,
typedef enum enNVMePciSpc
{
    PCISPC_TABLE
    PCISPC_FENCE                // always must be the last element
} enNVMePciSpc;
#undef ZZ

typedef struct {
	enPCICap 		cap;
    uint16_t        offset;     // ==USHRT_MAX implies offset is unknown
    uint16_t        size;
    vector<enNVMeSpecRev> specRev;
    uint64_t        maskRO;
    uint64_t        impSpec;
    uint64_t        dfltValue;
    const char     *desc;
}stNVMePciSpc;

/* 		RegName,	PciSpc	,	offset,		bits,		type,		reset,	specRev							,	desc	*/
#define PCIREG_TABLE										\
	ZZ(PCIHI_DID,	PCISPC_ID,	16,			16,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Device ID (DID)")							\
	ZZ(PCIHI_VID,	PCISPC_ID,	0,			16,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Vendor ID (VID)")							\
	ZZ(PCIHI_IOSE,	PCISPC_CMD,	0,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : VI/O Space Enable (IOSE)")				\
	ZZ(PCIHI_MSE,	PCISPC_CMD,	1,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Memory Space Enable (MSE)")				\
	ZZ(PCIHI_BME,	PCISPC_CMD,	2,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Bus Master Enable (BME)")					\
	ZZ(PCIHI_PEE,	PCISPC_CMD,	6,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Parity Error Response Enable (PEE)")		\
	ZZ(PCIHI_SEE,	PCISPC_CMD,	8,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : SERR# Enable (SEE)")						\
	ZZ(PCIHI_ID,	PCISPC_CMD,	10,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Interrupt Disable (ID)")					\
	ZZ(PCIHI_IS,	PCISPC_STS,	3,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Interrupt Status (IS)")					\
	ZZ(PCIHI_CL,	PCISPC_STS,	4,			1,			REG_RO,		1,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Capabilities List (CL)")					\
	ZZ(PCIHI_DPD,	PCISPC_STS,	8,			1,			REG_RWC,	0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Master Data Pariy Error Detected (DPD)")	\
	ZZ(PCIHI_RTA,	PCISPC_STS,	12,			1,			REG_RWC,	0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Received Target Abort (RTA)")				\
	ZZ(PCIHI_RMA,	PCISPC_STS,	13,			1,			REG_RWC,	0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Received Master-Abort (RMA)")				\
	ZZ(PCIHI_SSE,	PCISPC_STS,	14,			1,			REG_RWC,	0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Signaled System Error (SSE)")				\
	ZZ(PCIHI_DPE,	PCISPC_STS,	15,			1,			REG_RWC,	0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Detected Parity Error (DPE)")				\
	ZZ(PCIHI_RID,	PCISPC_RID,	0,			8,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Revision ID (RID)")						\
	ZZ(PCIHI_BCC,	PCISPC_CC,	0,			8,			REG_RO,		1,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Base Class Code (BCC)")					\
	ZZ(PCIHI_SCC,	PCISPC_CC,	8,			8,			REG_RO,		8,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Sub Class Code (SCC)")					\
	ZZ(PCIHI_PI,	PCISPC_CC,	16,			8,			REG_RO,		2,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Programming Interface (PI)")				\
	ZZ(PCIHI_CLS,	PCISPC_CLS,	0,			8,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Cache Line Size (CLS)")					\
	ZZ(PCIHI_MLT,	PCISPC_MLT,	0,			8,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Master Latency Timer (MLT)")				\
	ZZ(PCIHI_HL,	PCISPC_HTYPE,	0,			6,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Header Layout (HL)")						\
	ZZ(PCIHI_MFD,	PCISPC_HTYPE,	7,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Multi-Function Device (MFD)")				\
	ZZ(PCIHI_CC,	PCISPC_BIST,0,			4,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Completion Code (CC)")					\
	ZZ(PCIHI_SB,	PCISPC_BIST,6,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Start BIST (SB)")							\
	ZZ(PCIHI_BC,	PCISPC_BIST,7,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : BIST Capable (BC)")						\
	ZZ(PCIHI_RTE0,	PCISPC_BAR0,0,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Resource Type Indicator (RTE)")			\
	ZZ(PCIHI_TP0,	PCISPC_BAR0,1,			2,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Type (TP)")								\
	ZZ(PCIHI_PF0,	PCISPC_BAR0,3,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Prefetchable (PF)")						\
	ZZ(PCIHI_BA0,	PCISPC_BAR0,14,			18,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Base Address (BA)")						\
	ZZ(PCIHI_BA1,	PCISPC_BAR1,0,			32,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Base Address (BA)")						\
	ZZ(PCIHI_RTE2,	PCISPC_BAR2,0,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Resource Type Indicator (RTE)")			\
	ZZ(PCIHI_BA2,	PCISPC_BAR2,3,			29,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Base Address (BA)")						\
	ZZ(PCIHI_SSID,	PCISPC_SS,	16,			16,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Subsystem ID (SSID)")						\
	ZZ(PCIHI_SSVID,	PCISPC_SS,	0,			16,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Subsystem Vendor ID (SSVID)")				\
	ZZ(PCIHI_RBA,	PCISPC_EROM,0,			32,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : ROM Base Address (RBA)")					\
	ZZ(PCIHI_CP,	PCISPC_CAP,	0,			8,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Capability Pointer (CP)")					\
	ZZ(PCIHI_ILINE,	PCISPC_INTR,0,			8,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Interrupt Line (ILINE)")					\
	ZZ(PCIHI_IPIN,	PCISPC_INTR,8,			8,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI Header : Interrupt Pin (IPIN)")					\
	ZZ(PCIPM_CID,	PCISPC_PID,	0,			8,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : Cap ID (CID)")								\
	ZZ(PCIPM_NEXT,	PCISPC_PID,	8,			8,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : Next Capability (NEXT)")					\
	ZZ(PCIPM_VS,	PCISPC_PC,	0,			3,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : Version (VS)")								\
	ZZ(PCIPM_PMEC,	PCISPC_PC,	3,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : PME Clock (PMEC)")							\
	ZZ(PCIPM_DSI,	PCISPC_PC,	5,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : Device Specific Initialization (DSI)")		\
	ZZ(PCIPM_AUXC,	PCISPC_PC,	6,			3,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : Aux_Current (AUXC)")						\
	ZZ(PCIPM_D1S,	PCISPC_PC,	9,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : D1_Support (D1S)")							\
	ZZ(PCIPM_D2S,	PCISPC_PC,	10,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : D2_Support (D2S)")							\
	ZZ(PCIPM_PSUP,	PCISPC_PC,	11,			5,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : PME_Support (PSUP)")						\
	ZZ(PCIPM_PS,	PCISPC_PMCS,0,			2,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : Power State (PS)")							\
	ZZ(PCIPM_NSFRST,PCISPC_PMCS,3,			1,			REG_RO,		1,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : No Soft Reset (NSFRST)")					\
	ZZ(PCIPM_PMEE,	PCISPC_PMCS,8,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : PME Enable (PMEE)")						\
	ZZ(PCIPM_DSE,	PCISPC_PMCS,9,			4,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : Data Select (DSE)")						\
	ZZ(PCIPM_DSC,	PCISPC_PMCS,13,			2,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : Data Scale (DSC)")							\
	ZZ(PCIPM_PMES,	PCISPC_PMCS,15,			1,			REG_RWC,	0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PMCAP : PME Status (PMES)")						\
	ZZ(PCIMSI_CID,	PCISPC_MID,	0,			8,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSICAP : Capability ID (CID)")						\
	ZZ(PCIMSI_NEXT,	PCISPC_MID,	8,			8,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSICAP : Next Pointer (NEXT)")						\
	ZZ(PCIMSI_MSIE,	PCISPC_MC,	0,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSICAP : MSI Enable (MSIE)")						\
	ZZ(PCIMSI_MMC,	PCISPC_MC,	1,			3,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSICAP : Multiple Message Capable (MMC)")			\
	ZZ(PCIMSI_MME,	PCISPC_MC,	4,			3,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSICAP : Multiple Message Enable (MME)")			\
	ZZ(PCIMSI_C64,	PCISPC_MC,	7,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSICAP : 64 Bit Address Capable (C64)")			\
	ZZ(PCIMSI_PVM,	PCISPC_MC,	8,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSICAP : Per-Vector Masking Capable (PVM)")		\
	ZZ(PCIMSI_ADDR,	PCISPC_MA,	2,			30,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSICAP : Address (ADDR)")							\
	ZZ(PCIMSI_UADDR,PCISPC_MA,	0,			32,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSICAP : Upper Address (UADDR)")					\
	ZZ(PCIMSI_DATA,	PCISPC_MD,	0,			16,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSICAP : Data (DATA)")								\
	ZZ(PCIMSI_MASK,	PCISPC_MMASK,0,			32,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSICAP : Mask Bits (MASK)")						\
	ZZ(PCIMSI_PEND,	PCISPC_MPEND,0,			32,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSICAP : Pending Bits (PEND)")						\
	ZZ(PCIMSIX_CID,	PCISPC_MXID,0,			8,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSIXCAP : Capability ID (CID)")					\
	ZZ(PCIMSIX_NEXT,PCISPC_MXID,8,			8,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSIXCAP : Next Pointer (NEXT)")					\
	ZZ(PCIMSIX_TS,	PCISPC_MXC,	0,			11,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSIXCAP : Table Size (TS)")						\
	ZZ(PCIMSIX_FM,	PCISPC_MXC,	14,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSIXCAP : Function Mask (FM)")						\
	ZZ(PCIMSIX_MXE,	PCISPC_MXC,	15,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSIXCAP : MSI-X Enable (MXE)")						\
	ZZ(PCIMSIX_TBIR,PCISPC_MTAB,0,			3,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSIXCAP : Table BIR (TBIR)")						\
	ZZ(PCIMSIX_TO,	PCISPC_MTAB,3,			29,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSIXCAP : Table Offset (TO)")						\
	ZZ(PCIMSIX_PBIR,PCISPC_MPBA,0,			3,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSIXCAP : PBA BIR (PBIR)")							\
	ZZ(PCIMSIX_PBAO,PCISPC_MPBA,3,			29,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI MSIXCAP : PBA Offset (PBAO)")						\
	ZZ(PCIPX_CID,	PCISPC_PXID,0,			8,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Capability ID (CID)")						\
	ZZ(PCIPX_NEXT,	PCISPC_PXID,8,			8,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Next Pointer (NEXT)")						\
	ZZ(PCIPX_VER,	PCISPC_PXCAP,0,			3,			REG_RO,		2,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Capability Version (VER)")					\
	ZZ(PCIPX_DPT,	PCISPC_PXCAP,4,			3,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Device/Port Type (DPT)")					\
	ZZ(PCIPX_SI,	PCISPC_PXCAP,8,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Slot Implemented (SI)")					\
	ZZ(PCIPX_IMN,	PCISPC_PXCAP,9,			5,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Interrupt Message Number (IMN)")			\
	ZZ(PCIPX_MPSS,	PCISPC_PXDCAP,0,		3,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Max_Payload_Size Supported (MPSS)")			\
	ZZ(PCIPX_PFS,	PCISPC_PXDCAP,3,		2,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Phantom Functions Supported (PFS)")		\
	ZZ(PCIPX_ETFS,	PCISPC_PXDCAP,5,		1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Extended Tag Field Supported (ETFS)")		\
	ZZ(PCIPX_L0SL,	PCISPC_PXDCAP,6,		3,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Endpoint L0s Acceptable Latency (L0SL)")	\
	ZZ(PCIPX_L1L,	PCISPC_PXDCAP,9,		3,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Endpoint L1 Acceptable Latency (L1L)")		\
	ZZ(PCIPX_RER,	PCISPC_PXDCAP,15,		1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Role-based Error Reporting (RER)")			\
	ZZ(PCIPX_CSPLV,	PCISPC_PXDCAP,18,		8,			REG_RO,		1,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Captured Slot Power Limit Value (CSPLV)")	\
	ZZ(PCIPX_CSPLS,	PCISPC_PXDCAP,26,		2,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Captured Slot Power Limit Scale (CSPLS)")	\
	ZZ(PCIPX_FLRC,	PCISPC_PXDCAP,28,		1,			REG_RO,		1,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Function Level Reset Capability (FLRC)")	\
	ZZ(PCIPX_CERE,	PCISPC_PXDC,0,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Correctable Error Reporting Enable (CERE)")\
	ZZ(PCIPX_NFERE,	PCISPC_PXDC,1,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Non-Fatal Error Reporting Enable (NFERE)")	\
	ZZ(PCIPX_FERE,	PCISPC_PXDC,2,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Fatal Error Reporting Enable (FERE)")		\
	ZZ(PCIPX_URRE,	PCISPC_PXDC,3,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Unsupported Request Reporting Enable (URRE)")	\
	ZZ(PCIPX_ERO,	PCISPC_PXDC,4,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Enable Relaxed Ordering (ERO)")			\
	ZZ(PCIPX_MPS,	PCISPC_PXDC,5,			3,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Max_Payload_Size (MPS)")					\
	ZZ(PCIPX_ETE,	PCISPC_PXDC,8,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Extended Tag Enable (ETE)")				\
	ZZ(PCIPX_PFE,	PCISPC_PXDC,9,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Phantom Functions Enable (PFE)")			\
	ZZ(PCIPX_APPME,	PCISPC_PXDC,10,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : AUX Power PM Enable (APPME)")				\
	ZZ(PCIPX_ENS,	PCISPC_PXDC,11,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Enable No Snoop (ENS)")					\
	ZZ(PCIPX_MRRS,	PCISPC_PXDC,12,			3,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Max_Read_Request_Size (MRRS)")				\
	ZZ(PCIPX_IFLR,	PCISPC_PXDC,15,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Initiate Function Level Reset (IFLR)")		\
	ZZ(PCIPX_TP,	PCISPC_PXDS,5,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Transactions Pending (TP)")				\
	ZZ(PCIPX_APD,	PCISPC_PXDS,4,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : AUX Power Detected (APD)")					\
	ZZ(PCIPX_URD,	PCISPC_PXDS,3,			1,			REG_RWC,	0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Unsupported Request Detected (URD)")		\
	ZZ(PCIPX_FED,	PCISPC_PXDS,2,			1,			REG_RWC,	0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Fatal Error Detected (FED)")				\
	ZZ(PCIPX_NFED,	PCISPC_PXDS,1,			1,			REG_RWC,	0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Non-Fatal Error Detected (NFED)")			\
	ZZ(PCIPX_CED,	PCISPC_PXDS,0,			1,			REG_RWC,	0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Correctable Error Detected (CED)")			\
	ZZ(PCIPX_SLS,	PCISPC_PXLCAP,	0,			4,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Supported Link Speeds (SLS)")				\
	ZZ(PCIPX_MLW,	PCISPC_PXLCAP,	4,			6,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Maximum Link Width (MLW)")					\
	ZZ(PCIPX_ASPMS,	PCISPC_PXLCAP,	10,			2,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Active State Power Management Support (ASPMS)")\
	ZZ(PCIPX_L0SEL,	PCISPC_PXLCAP,	12,			3,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : L0s Exit Latency (L0SEL)")					\
	ZZ(PCIPX_L1EL,	PCISPC_PXLCAP,	15,			3,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : L1 Exit Latency (L1EL)")					\
	ZZ(PCIPX_CPM,	PCISPC_PXLCAP,	18,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Clock Power Management (CPM)")				\
	ZZ(PCIPX_AOC,	PCISPC_PXLCAP,	22,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : ASPM Optionality Compliance (AOC)")		\
	ZZ(PCIPX_PN,	PCISPC_PXLCAP,	24,			8,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Port Number (PN)")							\
	ZZ(PCIPX_ASPMC,	PCISPC_PXLC,	0,			2,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Active State Power Management Control (ASPMC)")	\
	ZZ(PCIPX_RCB,	PCISPC_PXLC,	3,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Read Completion Boundary (RCB)")	\
	ZZ(PCIPX_CCC,	PCISPC_PXLC,	6,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Common Clock Configuration (CCC)")	\
	ZZ(PCIPX_ES,	PCISPC_PXLC,	7,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Extended Synch (ES)")	\
	ZZ(PCIPX_ECPM,	PCISPC_PXLC,	8,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Enable Clock Power Management (ECPM)")	\
	ZZ(PCIPX_HAWD,	PCISPC_PXLC,	9,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Hardware Autonomous Width Disable (HAWD)")	\
	ZZ(PCIPX_CLS,	PCISPC_PXLS,	0,			4,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Current Link Speed (CLS)")	\
	ZZ(PCIPX_NLW,	PCISPC_PXLS,	4,			6,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Negotiated Link Width (NLW)")	\
	ZZ(PCIPX_SCC,	PCISPC_PXLS,	12,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Slot Clock Configuration (SCC)")	\
	ZZ(PCIPX_MEETP,	PCISPC_PXDCAP2,	22,			2,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Max End-End TLP Prefixes (MEETP)")	\
	ZZ(PCIPX_EETPS,	PCISPC_PXDCAP2,	21,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : End-End TLP Prefix Supported (EETPS)")	\
	ZZ(PCIPX_EFFS,	PCISPC_PXDCAP2,	20,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Extended Fmt Field Supported (EFFS)")	\
	ZZ(PCIPX_OBFFS,	PCISPC_PXDCAP2,	18,			2,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : OBFF Supported (OBFFS)")	\
	ZZ(PCIPX_TPHCS,	PCISPC_PXDCAP2,	12,			2,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : TPH Completer Supported (TPHCS)")	\
	ZZ(PCIPX_LTRS,	PCISPC_PXDCAP2,	11,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Latency Tolerance Reporting Supported (LTRS)")	\
	ZZ(PCIPX_128CCS,	PCISPC_PXDCAP2,	9,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : 128-bit CAS Completer Supported (128CCS)")	\
	ZZ(PCIPX_64AOCS,	PCISPC_PXDCAP2,	8,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : 64-bit AtomicOp Completer Supported (64AOCS)")	\
	ZZ(PCIPX_32AOCS,	PCISPC_PXDCAP2,	7,			1,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : 32-bit AtomicOp Completer Supported (32AOCS)")	\
	ZZ(PCIPX_CTDS,	PCISPC_PXDCAP2,	4,			1,			REG_RO,		1,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Completion Timeout Disable Supported (CTDS)")	\
	ZZ(PCIPX_CTRS,	PCISPC_PXDCAP2,	0,			4,			REG_RO,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Completion Timeout Ranges Supported (CTRS)")	\
	ZZ(PCIPX_CTV,	PCISPC_PXDC2,	0,			4,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Completion Timeout Value (CTV))")	\
	ZZ(PCIPX_CTD,	PCISPC_PXDC2,	4,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Completion Timeout Disable (CTD))")	\
	ZZ(PCIPX_LTRME,	PCISPC_PXDC2,	10,			1,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : Latency Tolerance Reporting Mechanism Enable (LTRME))")	\
	ZZ(PCIPX_OBFFE,	PCISPC_PXDC2,	13,			2,			REG_RW,		0,		list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),	"PCI PXCAP : OBFF Enable (OBFFE))")	\
	

#define ZZ(a, b, c, d, e, f, g, h)      a,
typedef enum enNVMePCIReg
{
	PCIREG_TABLE
    PCIREG_FENCE                // always must be the last element
} enNVMePCIReg;
#undef ZZ

typedef struct {
	enNVMePciSpc 	spcID;				// PCI Register Spec Name
    uint8_t			offset;     		// Register Offset
    uint8_t			bits;				// Register Size
    enRegType		type;				// Register Access Type
    uint32_t		rstVal;				// Reset Value
    vector<enNVMeSpecRev> specRev;		// Supported Spec Revisions
    const char     *desc;				// Register Description
}stNVMePciReg;

/////////////////////////////////////////////////////////////////////////////////
//				NVMe Controller Register
/////////////////////////////////////////////////////////////////////////////////

/*     CtlSpc,           offset,  size, specRev,                                      maskRO,             impSpec,            dfltValue,          desc */
#define CTLSPC_TABLE                                                                                                                                             \
    ZZ(CTLSPC_CAP,       0x00,    8,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0xffffffffffffffff, 0x00ff1fffff07ffff, 0x0000000000000000, "ctrlr CAP register (CAP)")                     \
    ZZ(CTLSPC_VS,        0x08,    4,    list_of(SPECREV_10b),                         0x00000000ffffffff, 0x0000000000000000, 0x0000000000010000, "ctrlr version register (VS)")                  \
    ZZ(CTLSPC_VS_11,     0x08,    4,    list_of(SPECREV_11),                          0x00000000ffffffff, 0x0000000000000000, 0x0000000000010100, "ctrlr version register (VS)")                  \
    ZZ(CTLSPC_VS_12,     0x08,    4,    list_of(SPECREV_12)(SPECREV_121)(SPECREV_13),                          0x00000000ffffffff, 0x0000000000000000, 0x0000000000010200, "ctrlr version register (VS)")                  \
    ZZ(CTLSPC_INTMS,     0x0c,    4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, "ctrlr interrupt mask set register (INTMS)")    \
    ZZ(CTLSPC_INTMC,     0x10,    4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, "ctrlr interrupt mask clear register (INTMC)")  \
    ZZ(CTLSPC_CC,        0x14,    4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000ff00000e, 0x0000000000000000, 0x0000000000000000, "ctrlr config register (CC)")                   \
    ZZ(CTLSPC_RES0,      0x18,    4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, "ctrlr reserved area 0x18")                     \
    ZZ(CTLSPC_CSTS,      0x1c,    4,    list_of(SPECREV_10b),                         0x00000000ffffffff, 0x0000000000000000, 0x0000000000000000, "ctrlr status register (CSTS)")                 \
    ZZ(CTLSPC_CSTS_11,   0x1c,    4,    list_of(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),              0x00000000ffffffef, 0x0000000000000012, 0x0000000000000000, "ctrlr status register (CSTS)")                 \
    ZZ(CTLSPC_RES1,      0x20,    4,    list_of(SPECREV_10b),                         0x00000000ffffffff, 0x0000000000000000, 0x0000000000000000, "ctrlr reserved area 0x20")                     \
    ZZ(CTLSPC_NSSR,      0x20,    4,    list_of(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13),              0x0000000000000000, 0x0000000000000000, 0x0000000000000000, "ctrlr NVM subsystem reset (NSSR)")                     \
    ZZ(CTLSPC_AQA,       0x24,    4,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x00000000f000f000, 0x0000000000000000, 0x0000000000000000, "ctrlr admin Q attrib register (AQA)")          \
    ZZ(CTLSPC_ASQ,       0x28,    8,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000fff, 0x00000000fffff000, 0x0000000000000000, "ctrlr admin SQ BAR register (ASQ)")            \
    ZZ(CTLSPC_ACQ,       0x30,    8,    list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0x0000000000000fff, 0x00000000fffff000, 0x0000000000000000, "ctrlr admin CQ BAR register (ACQ)")            \
    ZZ(CTLSPC_RES2,      0x38,    3784, list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0xffffffffffffffff, 0x0000000000000000, 0x0000000000000000, "ctrlr reserved area 0x38")                     \
    ZZ(CTLSPC_RES3,      0xf00,   256,  list_of(SPECREV_10b)(SPECREV_11)(SPECREV_12)(SPECREV_121)(SPECREV_13), 0xffffffffffffffff, 0x0000000000000000, 0x0000000000000000, "ctrlr cmd set specific (reserved)")

#define ZZ(a, b, c, d, e, f, g, h)         a,
typedef enum enNVMeCtlSpc
{
    CTLSPC_TABLE
    CTLSPC_FENCE                // always must be the last element
}enNVMeCtlSpc;
#undef ZZ

typedef struct {
    uint16_t        offset;     // ==USHRT_MAX implies offset is unknown
    uint16_t        size;
    vector<enNVMeSpecRev> specRev;
    uint64_t        maskRO;
    uint64_t        impSpec;    // implementation specific
    uint64_t        dfltValue;
    const char     *desc;
}stNVMeCtlSpc;

#endif
